{"version":3,"sources":["components/Header/Header.js","components/Maps/Flag/Flag.js","components/Maps/Maps.js","components/AvailableGames/GameCover/GameCover.js","components/AvailableGames/AvailableGames.js","components/AppPreview/AppPreview.js","components/InterestForm/InterestForm.js","components/Footer/Footer.js","components/Home/Home.js","utils/Fetcher.js","components/Registration/RegistrationForm/RegistrationForm.js","components/Navigation/Navigation.js","components/Registration/Registration.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","src","Component","Flag","props","countryCode","code","toString","toLowerCase","Fragment","id","alt","name","draggable","GameCover","style","isList","backgroundImage","gameCover","coverImageUrl","coverImageUrlSmall","playersOnline","gameLogoUrl","AvailableGames","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","gameCovers","gameName","checkScreenSize","bind","assertThisInitialized","calculateTotalPlayers","target","innerWidth","window","addEventListener","nrOfPlayers","forEach","element","parseInt","e","setState","_this2","map","index","AvailableGames_GameCover_GameCover","key","AppPreview","Footer","t","c1","c2","c3","c4","Home","components_Header_Header","components_AppPreview_AppPreview","components_AvailableGames_AvailableGames","components_Footer_Footer","checkStatus","res","Promise","resolve","reject","headers","has","sessionStorage","setItem","get","json","then","body","ok","succeeded","objectSpread","jsError","Error","statusText","addParams","url","params","u","URL","value","Array","isArray","searchParams","append","JSON","stringify","options","Content-Type","getItem","Fetcher","arguments","length","undefined","fetch","method","credentials","post","delete","SERVER_URL","process","RegistrationForm","submitFormActive","loading","loadingDone","inputError","registrated","registerFormShown","done","doneLoadingText","inputs","usertag","valid","error","regex","RegExp","email","password","confirmpassword","alphakey","onInputChange","defineProperty","checkConfirmPass","checkToken","formIsValid","inputStatus","push","includes","setErrorMsgAndInvalid","inputName","str","setInputsValid","setAndgetAlphaKey","alphaKeyMatch","match","alphaKeyInvite","liveValidation","test","onEmailSubmit","preventDefault","catch","err","username","alpha-key","registered","doneloadingtext","play","clearState","lottie","loadAnimation","container","document","getElementById","renderer","loop","autoplay","path","location","href","_this3","onClick","stop","type","placeholder","onChange","onBlur","autoComplete","automplete","Navigation","NavLink","to","Registration","components_Navigation_Navigation","Registration_RegistrationForm_RegistrationForm","App","HashRouter","Switch","Route","component","exact","Boolean","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98a56fd2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Header.scss';\n\nclass Header extends Component {\n\n    render() {\n      return (\n        <div className=\"header-container\">\n            <div className=\"div-content\">\n                <img className=\"icon\" src=\"/brawl-logo-keyboard.png\" />\n                <img className=\"logo\" src=\"/brawl-gaming-logo-colored.png\" />\n                <div className=\"header-title\">\n                </div>\n                <div className=\"header-subtitle\">\n                </div>\n            </div>\n        </div>\n      );\n    }\n  }\n\n  export default Header;\n","import React from 'react';\n\nimport './Flag.scss';\n\nexport default function Flag(props) {\n    var countryCode = props.code.toString().toLowerCase();\n    return (\n        <React.Fragment>\n            <div className=\"country-display-container\">\n                <div className=\"flag-container\">\n                    <img id='myImage' src={countryCode+\".png\"} alt={\"flag of \" + props.name} draggable='false'/>\n                </div>\n                <p className=\"country-name\">{props.name}</p>\n            </div>\n        </React.Fragment>\n    )\n}\n\n","import React, { Component } from 'react';\nimport ScrollableAnchor from 'react-scrollable-anchor';\nimport Flag from './Flag/Flag';\nimport * as maps from './svg-maps';\n\n\nimport '../../styles/_colors.scss'\nimport './Maps.scss';\n\nclass Maps extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n      availableCountries: ['AU', 'AT', 'BE', 'CA', 'DK', 'FI', 'FR', 'DE', 'IE', 'IT', 'JP', 'HK', 'LU', 'NL', 'NZ', 'NO', 'PT', 'SG', 'ES', 'SE', 'CH', 'GB', 'US', 'IN', 'MX', 'BR'],\n      flagsData: []\n    }\n    this.countryAnimation = this.countryAnmation.bind(this);\n    this.createFlagData = this.createFlagData.bind(this)\n  }\n  \n  componentDidMount() {\n    this.setAvailableCountries()\n    this.countryAnimation();\n    this.createFlagData();\n  }\n\n  createFlagData() {\n    var flagsData = []\n    this.state.availableCountries.forEach(element => {\n      var countryTag = document.getElementById(element)\n      flagsData.push(\n        {code: element, name: countryTag.attributes['name'].value}\n      )\n    });\n    this.setState({\n      flagsData: flagsData,\n    })\n  }\n\n  setAvailableCountries() {\n    for (var i = 0; i < this.state.availableCountries.length; i++) {\n      var country = document.getElementById(this.state.availableCountries[i])\n      country.style.opacity = 1;\n    }\n  }\n\n  countryAnmation() {\n    var countryCodes = this.state.availableCountries;\n    var randCountryCode1 = countryCodes[Math.floor(Math.random()*countryCodes.length)];\n    var randCountry1 = document.getElementById(randCountryCode1);\n    for(var i = 0; i < randCountry1.children.length; i++) {\n      randCountry1.children[i].style.fill = '#2C821F';\n    }\n   \n    setTimeout(() => {\n      for(var i = 0; i < randCountry1.children.length; i++) {\n        randCountry1.children[i].style.fill = '#37392E';\n      }\n    }, 2000)\n    setTimeout(() => {\n      this.countryAnimation();\n    }, 4000)\n    \n  }\n\n\trender() {\n\t\treturn (\n      <ScrollableAnchor id=\"available-countries-anchor\">\n        <section id=\"available-countries\">\n          <div className=\"map-header-container\">\n            <p className=\"map-header\">We Offer Our Service In These Countries</p>\n            <div className=\"line\" />\n          </div>\n          <div className=\"middle-section\">\n            <div className=\"map\">\n              { maps.world() }\n            </div>\n          </div>\n          <div className=\"map-footer-container\">\n            <div className=\"flags-container\">\n              <p className=\"flags-header\">Available in {this.state.availableCountries.length} countries world wide</p>\n              <p className=\"flags-subheader\">We expand internationally at the same rate as Stripe does, because we use their services for money transactions. Visit <a className=\"text-link\" href=\"https://www.stripe.com/global\">Stripe</a> for more information if you can't find your country in the list below.</p>\n              <div className=\"line-container\"><div className=\"line\" /></div>\n              <div className=\"flags\">\n                { this.state.flagsData.map((element, index) => {\n                  return <Flag key={index} code={element.code} name={element.name}/>\n                })}\n              </div>\n            </div>\n          </div>\n        </section>\n      </ScrollableAnchor>\n\t\t);\n\t}\n}\n\nexport default Maps;","import React from 'react';\nimport './GameCover.scss';\n\nfunction GameCover (props) {\n    return (\n        <div className=\"gameCover-container\" style={props.isList ? {backgroundImage: 'url('+props.gameCover.coverImageUrl+')'} : {backgroundImage: 'url('+props.gameCover.coverImageUrlSmall+')'}}>\n            <div className=\"gameCover-overlay\" />\n            <div className=\"players-online\">\n                <div className=\"status-circle\" />\n                <p className=\"totalOnline-text\">{props.gameCover.playersOnline} Online</p>\n            </div>\n            <div className=\"game-logo\" style={{backgroundImage: 'url('+props.gameCover.gameLogoUrl+')'}}/>\n        </div>\n        );\n    }\n  export default GameCover;","import React, { Component } from 'react';\nimport './AvailableGames.scss';\nimport GameCover from './GameCover/GameCover';\n\nclass AvailableGames extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameCovers: [\n        {gameName: \"Counter Strike: Global Offensive\", coverImageUrl: \"./csgo.jpg\", coverImageUrlSmall: \"./csgo-small.jpg\", playersOnline: \"798\", gameLogoUrl: \"./csgo-logo.png\"},\n        {gameName: \"Your favorite game\", coverImageUrl: \"./your-favorite-game.png\", coverImageUrlSmall: \"./your-favorite-game-small.png\", playersOnline: \"0\", gameLogoUrl: \"./none.png\"},\n        //{gameName: \"Counter Strike: Global Offensive\", coverImageUrl: \"./fortnite.jpg\", coverImageUrlSmall: \"./fortnite-small.jpg\", playersOnline: \"798\", gameLogoUrl: \"./fortnite-logo.png\"},\n        //{gameName: \"Counter Strike: Global Offensive\", coverImageUrl: \"./fifa.jpg\", coverImageUrlSmall: \"./fifa-small.jpg\", playersOnline: \"798\", gameLogoUrl: \"./fifa-logo.png\"},\n        //{gameName: \"Counter Strike: Global Offensive\", coverImageUrl: \"./rocketleague.jpg\", coverImageUrlSmall: \"./rocketleague-small.jpg\", playersOnline: \"798\", gameLogoUrl: \"./rocketleague-logo.png\"},\n        //{gameName: \"Counter Strike: Global Offensive\", coverImageUrl: \"./overwatch.jpg\", coverImageUrlSmall: \"./overwatch-small.jpg\", playersOnline: \"798\", gameLogoUrl: \"./overwatch-logo.png\"},\n        //{gameName: \"Counter Strike: Global Offensive\", coverImageUrl: \"./leagueoflegends.jpg\", coverImageUrlSmall: \"./leagueoflegends-small.jpg\", playersOnline: \"798\", gameLogoUrl: \"./leagueoflegends-logo.png\"}\n      ],\n      isList: \"\"\n    }\n    this.checkScreenSize = this.checkScreenSize.bind(this);\n    this.calculateTotalPlayers = this.calculateTotalPlayers.bind(this);\n  }\n\n  componentDidMount() {\n    this.checkScreenSize({target: { innerWidth: window.innerWidth}});\n    window.addEventListener(\"resize\", this.checkScreenSize);\n  }\n\n  calculateTotalPlayers() {\n    var nrOfPlayers = 0\n    this.state.gameCovers.forEach(element => {\n      nrOfPlayers = nrOfPlayers + parseInt(element.playersOnline);\n    });\n    return nrOfPlayers;\n  }\n\n  checkScreenSize(e) {\n    this.setState({\n      isList: e.target.innerWidth > 767,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"availableGames-container\">\n        <div className=\"background-picture\"></div>\n        <div className=\"content-container\">\n          <div className=\"title-container\">\n            <p className=\"title-text\">Upcoming games</p>\n          </div>\n          <div className=\"totalOnline-container\">\n            <div className=\"status-circle\"></div>\n            <p className=\"totalOnline-text\">{this.calculateTotalPlayers()} Online</p>\n          </div>\n          <div className=\"supportedGames-container\">\n            {this.state.gameCovers.map((gameCover, index) => {\n              return <GameCover key={index} gameCover={gameCover} isList={this.state.isList}/>\n            })}\n          {/*<div className=\"button-container\">\n            <button className=\"button\">See all games</button>\n          </div>*/}\n        </div>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default AvailableGames;\n","import React, { Component } from 'react';\n\nimport './AppPreview.scss';\n\nclass AppPreview extends Component {\n    render() {\n\t    return (\n          <div className=\"app-preview\">\n            <h1 className=\"title-text\">Increase your gaming experience</h1>\n            <p className=\"description\">Match with other players and compete for money. All automated through our platform. Launching matches through our app, transfering money directly to your account when match finishes.</p>\n            <img className=\"screenshot\" src=\"/app-start.png\" />\n            <img className=\"screenshot\" src=\"/app-lobby.png\" />\n            <p className=\"description\">You play to win money, we automated everything else.</p>\n          </div>\n\t\t)\n\t}\n}\n\nexport default AppPreview;\n","import React, { Component } from 'react';\n//import firebase from 'firebase';\nimport ScrollableAnchor, { configureAnchors } from 'react-scrollable-anchor';\nimport lottie from 'lottie-web'\nimport './InterestForm.scss';\n//require(\"firebase/functions\");\n\nclass InterestForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      submitFormActive: false,\n      unsubscribeFormActive: false,\n      loading: false,\n      loadingDone: false,\n      inputError: false,\n      registered: false,\n      registerFormShown: true,\n      errortext: \"\",\n      doneloadingtext: \"\",\n      inputs: {\n        fullname: \"\",\n        email: \"\",\n        password: \"\",\n        confirmpassword: \"\",\n        unsubemail: \"\",\n        unsubpassword: \"\",\n      },\n      regex: {\n        fullname: RegExp(/^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u),\n        email:    RegExp(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/),\n        unsubemail: RegExp(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/),\n        password: RegExp(/^.{6,32}$/i),\n        unsubpassword: RegExp(/^.{6,32}$/i),\n\n      },\n      valid: {\n        fullname: \"\",\n        email: \"\",\n        password: \"\",\n        confirmpassword: \"\",\n        unsubemail: \"\",\n        unsubpassword: \"\",\n      },\n    }\n    this.onInputChange             = this.onInputChange.bind(this);\n    this.onEmailSubmit             = this.onEmailSubmit.bind(this);\n    this.liveValidation            = this.liveValidation.bind(this);\n    this.formIsValid               = this.formIsValid.bind(this);\n    this.changeForm                = this.changeForm.bind(this);\n    this.liveValidationUnsubscribe = this.liveValidationUnsubscribe.bind(this)\n    this.unsubFormIsValid          = this.unsubFormIsValid.bind(this)\n  }\n\n  componentDidMount() {\n    this.initFirebase()\n    configureAnchors({offset: 0, scrollDuration: 1000})\n    lottie.loadAnimation({\n      container: document.getElementById('loading'),\n      renderer: \"svg\",\n      loop: true,\n      autoplay: true,\n      path: \"loading.json\"\n    });\n    var done = \n    lottie.loadAnimation({\n      container: document.getElementById('loadingDone'),\n      renderer: \"svg\",\n      loop: false,\n      autoplay: false,\n      path: \"done.json\"\n    });\n    this.setState({\n      done: done,\n    })\n  }\n\n  initFirebase() {\n    /*\n    firebase.initializeApp({\n      apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n      projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n      databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n    });\n    */\n    \n  }\n\n  onInputChange(e) {\n    this.setState({\n      inputs: {\n        ...this.state.inputs,\n        [e.target.name]: e.target.value,\n      }\n    }) \n  }\n\n  onEmailSubmit() {\n    /*\n    var addInterestedUser = firebase.functions().httpsCallable('addInterestedUser');\n    addInterestedUser({\n      fullname: this.state.inputs.fullname,\n      email: this.state.inputs.email,\n      password: this.state.inputs.password,\n      confirmpassword: this.state.inputs.confirmpassword,\n    }).then((res) => {\n      console.log(res)\n      this.setState({\n        registered: true,\n        loading: false,\n        loadingDone: true,\n        doneloadingtext: \"Thank you for showing interest! As soon as we launch something we will contact you.\",\n      })\n      this.state.done.play()\n    }).catch((err) => {\n      console.log(err)\n    }) \n    */\n  }\n\n  formIsValid(){\n    const inputNames = ['fullname', 'email', 'password', 'confirmpassword']\n    var inputStatus = [];\n\n    inputNames.forEach(element => {\n      inputStatus.push(this.state.valid[element])\n    });\n    this.setState({\n      submitFormActive: !(inputStatus.includes('invalid') || inputStatus.includes('')),\n    })\n  }\n\n  liveValidation(e) {\n    const inputType = e.target.name\n    const inputValue = e.target.value\n    \n    if (inputType !== \"confirmpassword\") {\n      if (inputValue === \"\") {\n        this.setState({\n          valid: {\n            ...this.state.valid,\n            [inputType]: \"\",\n          }\n        }, () => {\n          this.formIsValid()\n        })\n      } else if (this.state.regex[inputType].test(inputValue)) {\n        this.setState({\n          valid: {\n            ...this.state.valid,\n            [inputType]: \"valid\",\n          }\n        }, () => {\n          this.formIsValid()\n        })\n      } else {\n        this.setState({\n          valid: {\n            ...this.state.valid,\n            [inputType]: \"invalid\",\n          }\n        }, () => {\n          this.formIsValid()\n        })\n      }\n    } else {\n      if (inputValue === \"\") {\n        this.setState({\n          valid: {\n            ...this.state.valid,\n            [inputType]: \"\",\n          }\n        }, () => {\n          this.formIsValid()\n        })\n      } else if (inputValue === this.state.inputs.password && this.state.valid.password === \"valid\") {\n        this.setState({\n          valid: {\n            ...this.state.valid,\n            [inputType]: \"valid\",\n          }\n        }, () => {\n          this.formIsValid()\n        })\n      } else {\n        this.setState({\n          valid: {\n            ...this.state.valid,\n            [inputType]: \"invalid\",\n          }\n        }, () => {\n          this.formIsValid()\n        })\n      }\n    }\n  }\n\n  checkConfirmPass(e) {\n    if (e.target.value === this.state.inputs.password && this.state.inputs.password !== \"\") {\n      this.setState({\n        valid: {\n          ...this.state.valid,\n          [e.target.name]: \"valid\",\n        }\n      }, () => {\n        this.formIsValid()\n      })\n    } else if ((this.state.valid.confirmpassword === \"valid\" && e.target.value !== this.state.inputs.password) || this.state.inputs.password === \"\") {\n      this.setState({\n        valid: {\n          ...this.state.valid,\n          [e.target.name]: \"\",\n        }\n      }, () => {\n        this.formIsValid()\n      })\n    }\n  }\n\n  changeForm() {\n    this.setState({\n      registerFormShown: !this.state.registerFormShown,\n      inputError: false,\n      errortext: \"\",\n      inputs: {\n        ...this.state.inputs,\n        password: \"\",\n        confirmpassword: \"\",\n        unsubemail: \"\",\n        unsubpassword: \"\"\n      },\n      valid: {\n        ...this.state.valid,\n        password: \"\",\n        confirmpassword: \"\",\n        unsubemail: \"\",\n        unsubpassword: \"\"\n      }\n    })\n  }\n\n  liveValidationUnsubscribe(e) {\n    const inputType = e.target.name;\n    const inputValue = e.target.value;\n    if(inputValue === \"\") {\n      this.setState({\n        valid: {\n          ...this.state.valid,\n          [inputType]: \"\",\n        }\n      }, () => {\n        this.unsubFormIsValid()\n      })\n    } else if (this.state.regex[inputType].test(inputValue)) {\n      this.setState({\n        valid: {\n          ...this.state.valid,\n          [inputType]: \"valid\",\n        }\n      }, () => {\n        this.unsubFormIsValid()\n      })\n    } else {\n      this.setState({\n        valid: {\n          ...this.state.valid,\n          [inputType]: \"invalid\",\n        }\n      }, () => {\n        this.unsubFormIsValid()\n      })\n    }\n  }\n\n  unsubFormIsValid() {\n    const inputNames = ['unsubemail', 'unsubpassword']\n    var inputStatus = [];\n    inputNames.forEach(element => {\n      inputStatus.push(this.state.valid[element])\n    });\n    this.setState({\n      unsubscribeFormActive: !(inputStatus.includes('invalid') || inputStatus.includes('')),\n    })\n  }\n\n  checkPasswordLength(e) {\n    var value = e.target.value\n    var n = value.length;\n    if (n > 5) {\n      this.setState({\n        valid: {\n          ...this.state.valid,\n          [e.target.name]: 'valid',\n        }\n      }, this.unsubFormIsValid)\n    } else {\n      this.setState({\n        valid: {\n          ...this.state.valid,\n          [e.target.name]: '',\n        }\n      }, this.unsubFormIsValid)\n    }\n  }\n\n  onUnsubscribe() {\n    /*\n    var removeInterestedUser = firebase.functions().httpsCallable('removeInterestedUser');\n    removeInterestedUser({\n      email: this.state.inputs.unsubemail,\n      password: this.state.inputs.unsubpassword,\n    }).then((res) => {\n      if (res.data.response === \"error\") {\n        this.setState({\n          loading: false,\n          inputError: true,\n          errortext: res.data.message,\n          valid: {\n            ...this.state.valid,\n            unsubpassword: \"\",\n            unsubemail: \"\",\n          }\n        })\n      } else if (res.data.response === \"success\") {\n        this.setState({\n          loading: false,\n          loadingDone: true,\n          inputError: false,\n          registered: true,\n          errortext: \"\",\n          doneloadingtext: \"We are very sorry that you are leaving us. Welcome back at any time!\",\n          valid: {\n            ...this.state.valid,\n            unsubpassword: \"\",\n            unsubemail: \"\",\n          }\n        })\n        this.state.done.play()\n      }\n    }).catch((err) => {\n      console.log(err)\n    }) \n    */\n  }\n\n  render() {\n    return(\n      <ScrollableAnchor id={\"interest-section\"} >\n        <section className=\"interest-form-container\">\n          <p className=\"interest-header\">NOTICE OF INTEREST</p>\n          <div id=\"loading\" className={\"loading \" + (this.state.loading ? \"active\": \"\")} />\n          <div id=\"loadingDone\" className={\"loadingDone \" + (this.state.loadingDone ? \"active\": \"\")} />\n          {!this.state.registered ?\n            <div className={\"form-container \" + (this.state.loading ? \"inactive\": \"\")}>\n            { this.state.registerFormShown ?\n              <React.Fragment>\n                <div className=\"input-container\">\n                  <input className={\"form-input \" + ((this.state.valid.fullname === \"valid\") ? \"valid\": \"\") + ((this.state.valid.fullname === \"invalid\") ? \"invalid\": \"\")} id=\"full-name-input\" type=\"text\" name=\"fullname\" placeholder=\"Full Name\" onChange={this.onInputChange} onBlur={this.liveValidation} autoComplete=\"off\" value={this.state.inputs.fullname}></input>\n                </div>\n                <div className=\"input-container\">\n                  <input className={\"form-input \" + ((this.state.valid.email === \"valid\") ? \"valid\": \"\") + ((this.state.valid.email === \"invalid\") ? \"invalid\": \"\")} id=\"email-input\" type='text' name=\"email\" placeholder=\"E-mail\" onChange={this.onInputChange} onBlur={this.liveValidation} autoComplete=\"off\" value={this.state.inputs.email}></input>\n                </div>\n                <div className=\"input-container\">\n                  <input className={\"form-input \" + ((this.state.valid.password === \"valid\") ? \"valid\": \"\") + ((this.state.valid.password === \"invalid\") ? \"invalid\": \"\")} id=\"password-input\" type='password' name=\"password\" placeholder=\"Password\" onChange={this.onInputChange} onBlur={this.liveValidation} autoComplete=\"off\" value={this.state.inputs.password}></input>\n                </div>\n                <div className=\"input-container\">\n                  <input className={\"form-input \" + ((this.state.valid.confirmpassword === \"valid\") ? \"valid\": \"\") + ((this.state.valid.confirmpassword === \"invalid\") ? \"invalid\": \"\")} id=\"confirm-password-input\" type='password' name=\"confirmpassword\" placeholder=\"Confirm Password\" onChange={(e) => {this.onInputChange(e); this.checkConfirmPass(e);}} onBlur={this.liveValidation} automplete=\"off\" value={this.state.inputs.confirmpassword}></input>\n                </div>\n                <div className=\"input-container\">\n                  <button id=\"form-submit\" className={(this.state.submitFormActive ? \"active\" : \"\")} onClick={this.state.submitFormActive ? (e) => {this.onEmailSubmit(e); this.setState({loading: true})} : () => {}}>Send</button>\n                </div>\n                <div className=\"interest-text\">Not interested anymore?\n                  <div className=\"remove-interest\" onClick={this.changeForm}>Unsubscribe here</div>\n                </div>\n              </React.Fragment>\n              :\n              <React.Fragment>\n                <div className=\"input-container\">\n                  <input className={\"form-input \" + ((this.state.valid.unsubemail === \"valid\") ? \"valid\": \"\") + ((this.state.valid.unsubemail === \"invalid\") ? \"invalid\": \"\")} id=\"email-input\" type=\"text\" name=\"unsubemail\" placeholder=\"Email\" onChange={this.onInputChange} onBlur={this.liveValidationUnsubscribe} autoComplete=\"off\" value={this.state.inputs.unsubemail}/>\n                </div>\n                <div className=\"input-container\">\n                  <input className={\"form-input \" + ((this.state.valid.unsubpassword === \"valid\") ? \"valid\": \"\") + ((this.state.valid.unsubpassword === \"invalid\") ? \"invalid\": \"\")} id=\"password-input\" type='password' name=\"unsubpassword\" placeholder=\"Password\" onChange={(e) => {this.onInputChange(e); this.checkPasswordLength(e)}} onBlur={this.liveValidationUnsubscribe} autoComplete=\"off\" value={this.state.inputs.unsubpassword}/>\n                </div>\n                <div className=\"input-container\">\n                  <button id=\"form-submit\" className={(this.state.unsubscribeFormActive ? \"active\" : \"\")} onClick={this.state.unsubscribeFormActive ? (e) => {this.onUnsubscribe(); this.setState({loading: true})} : () => {}}>Unsubscribe</button>\n                </div>\n                {this.state.inputError && <p id=\"errortext\">{this.state.errortext}</p>}\n                <div className=\"interest-text\">\n                  <div className=\"remove-interest\" onClick={this.changeForm}>Back to register</div>\n                </div>\n              </React.Fragment>\n            }\n            </div>\n            :  \n            <React.Fragment>\n              <div className=\"done-loading-container\">\n                <p className=\"interest-text\">{this.state.doneloadingtext}</p>\n                <button className=\"register-new-button\" onClick={() => {\n                  this.state.done.stop()\n                  this.setState({\n                    registered: false,\n                    registerFormShown: true,\n                    valid: {\n                      fullname: \"\",\n                      email: \"\",\n                      password: \"\",\n                      confirmpassword: \"\",\n                    },\n                    loadingDone: false,\n                    submitFormActive: false,\n                  })\n                }}>Go to Register</button>\n              </div>\n            </React.Fragment>\n          }\n        </section>\n      </ScrollableAnchor>\n    )\n  }\n}\n\nexport default InterestForm;","import React, { Component } from 'react';\n\nimport './Footer.scss';\n\nclass Footer extends Component {\n    state = {\n      t: \"\\u0043\\u006f\\u006e\\u0074\\u0061\\u0063\\u0074\",\n      c1: \"\\u004d\\u0061\\u0069\\u006c\\u003a \\u0069\\u006e\\u0066\\u006f\",\n      c2: \"\\u0040\\u0073\\u006f\\u0075\\u0072\\u0063\\u0065\\u0065\",\n      c3: \"\\u0073\\u0074\\u0061\\u0074\\u0065\",\n      c4: \"\\u006d\\u0070\\u0069\\u0072\\u0065\\u002e\\u0069\\u006f\"\n    }\n\n    render() {\n\t    return (\n          <footer className=\"footer\">\n            <h2 className=\"title\">{this.state.t}</h2>\n            <p className=\"c\">{this.state.c1}</p>\n            <p className=\"inter\">app</p>\n            <p className=\"c\">{this.state.c2}</p>\n            <p className=\"inter\">{this.state.c3}</p>\n            <p className=\"c\">{this.state.c4}</p>\n            <p className=\"copyright\">© Source Empire AB 2019</p>\n          </footer>\n\t\t)\n\t}\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\n\nimport Header from '../Header/Header';\nimport Maps from '../Maps/Maps';\nimport AvailableGames from '../AvailableGames/AvailableGames';\nimport InterestForm from '../InterestForm/InterestForm';\nimport AppPreview from '../AppPreview/AppPreview';\nimport Footer from '../Footer/Footer';\n\nimport './Home.scss';\n\nclass Home extends Component {\n    render() {\n\t    return (\n            <React.Fragment>\n                 <Header />\n                 <AppPreview />\n                 <AvailableGames/>\n                 <Footer />\n                 {/*<InterestForm/>*/}\n                 {/*<Maps />*/}\n            </React.Fragment>\n\t\t)\n\t}\n}\n\nexport default Home;\n","\nfunction checkStatus(res) {\n    return new Promise((resolve, reject) => {\n        if (res.headers.has('X-XSRF-TOKEN')) {\n            sessionStorage.setItem('XSRF-TOKEN', res.headers.get('X-XSRF-TOKEN'));\n        }\n        res.json().then(body => {\n            if (res.ok && body.succeeded === true) {\n                resolve(body);\n            } else {\n                reject({\n                    jsError: new Error(res.statusText),\n                    ...body\n                });\n            }\n        });\n    });\n}\n\nfunction addParams(url, params) {\n    const u = new URL(url);\n    for (var key in params) {\n        const value = params[key];\n\n        if (Array.isArray(value)) {\n            u.searchParams.append(key, JSON.stringify(value));\n        } else if (typeof value === \"object\") {\n            u.searchParams.append(key, JSON.stringify(value));\n        } else {\n            u.searchParams.append(key, value);\n        }\n    }\n    return u.toString();\n}\n\nfunction headers(options) {\n    const headers = {\n        'Content-Type': 'application/json',\n        ...options.headers\n    };\n    if (sessionStorage.getItem('XSRF-TOKEN')) {\n        headers['X-XSRF-TOKEN'] = sessionStorage.getItem('XSRF-TOKEN');\n    }\n    return headers;\n}\n\nconst Fetcher = {\n    get: (url, params, options = {}) => \n        fetch(addParams(url, params), {\n            ...options,\n            method: 'GET',\n            credentials: 'include',\n            headers: headers(options),\n        }).then(checkStatus),\n\n    post: (url, body, options = {}) => \n        fetch(url, {\n            ...options,\n            method: 'POST',\n            credentials: 'include',\n            body: JSON.stringify(body),\n            headers: headers(options),\n        }).then(checkStatus),\n\n    delete: (url, params, options = {}) => \n        fetch(addParams(url, params), {\n            ...options,\n            method: 'DELETE',\n            credentials: 'include',\n            headers: headers(options),\n        }).then(checkStatus),\n};\n\n\nexport default Fetcher;\n\n","import React, { Component } from 'react';\nimport lottie from 'lottie-web';\nimport Fetcher from '../../../utils/Fetcher';\n\nimport './RegistrationForm.scss';\n\nconst SERVER_URL = process.env.REACT_APP_SERVER_URL\n/*process.env.REACT_APP_SERVER_URL_FAKE;*/\n\n\nclass RegistrationForm extends Component {\n  state = {\n    submitFormActive: false,\n    loading: false,\n    loadingDone: false,\n    inputError: false,\n    registrated: false,\n    registerFormShown: true,\n    done: undefined, // lottie animation state\n    doneLoadingText: \"\",\n    inputs: {\n        usertag: {\n          value: '',\n          valid: '', //ENUM: \"\" = not checked, \"valid\" = valid, \"invalid\" = invalid\n          error: '',\n          regex: RegExp(/^[a-zA-Z0-9àáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-_]{5,128}$/),\n        },\n        email: {\n          value: '',\n          valid: '', //ENUM: \"\" = not checked, \"valid\" = valid, \"invalid\" = invalid\n          error: '',\n          regex: RegExp(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/),\n        },\n        password: {\n          value: '',\n          valid: '', //ENUM: \"\" = not checked, \"valid\" = valid, \"invalid\" = invalid\n          error: '',\n          regex: RegExp(/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=\\S+$).{8,}/),//RegExp(/^[a-zA-Z0-9àáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-_]{5,128}$/),//RegExp(/^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/),\n        },\n        confirmpassword: {\n          value: '',\n          valid: '', //ENUM: \"\" = not checked, \"valid\" = valid, \"invalid\" = invalid\n          error: '',\n          regex: RegExp(/^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/),\n        },\n        alphakey: {\n          value: '',\n          valid: '',\n          error: '',\n          regex: RegExp(/^(?!\\s*$).+/)\n        }\n        \n      },\n  }\n\n  componentDidMount() {\n    lottie.loadAnimation({\n      container: document.getElementById('loading'),\n      renderer: \"svg\",\n      loop: true,\n      autoplay: true,\n      path: \"loading.json\"\n    });\n    var done = \n    lottie.loadAnimation({\n      container: document.getElementById('loadingDone'),\n      renderer: \"svg\",\n      loop: false,\n      autoplay: false,\n      path: \"done.json\"\n    });\n    this.setState({\n      done: done,\n    });\n    this.setAndgetAlphaKey(window.location.href);\n  }\n    \n  onInputChange = (e) => {\n    this.setState({\n      inputs: {\n        ...this.state.inputs,\n        [e.target.name]: {\n          ...this.state.inputs[e.target.name],\n          value: e.target.value\n        },\n      }\n    }, () => {\n      this.checkConfirmPass();\n      this.checkToken();\n    });\n  }\n    \n  formIsValid = () => {\n      const inputNames = ['usertag', 'email', 'password', 'confirmpassword', \"alphakey\"]\n      \n      var inputStatus = [];\n      inputNames.forEach(element => {\n          inputStatus.push(this.state.inputs[element].valid)\n      });\n      this.setState({\n          submitFormActive: !(inputStatus.includes('invalid') || inputStatus.includes('')),\n      })\n  }\n\n  setErrorMsgAndInvalid = (inputName, str) => {\n    this.setState({\n      inputs: {\n        ...this.state.inputs,\n        [inputName]: {\n          ...this.state.inputs[inputName],\n          valid: \"invalid\",\n          error: str\n        },\n      },\n    }, () => {\n      this.formIsValid()\n    })\n  }\n\n  setInputsValid = (inputName, str) => {\n    this.setState({\n      inputs: {\n        ...this.state.inputs,\n        [inputName]: {\n          ...this.state.inputs[inputName],\n          valid: \"valid\",\n          error: \"\"\n        },\n      },\n    }, () => {\n      this.formIsValid()\n    })\n  }\n  checkToken = () => {\n    if(this.state.inputs.alphakey.value !== \"\") {\n      this.setState({\n        inputs: {\n          ...this.state.inputs,\n          alphakey: {\n            ...this.state.inputs.alphakey,\n            valid: 'valid',\n            error: ''\n          }\n        }\n      }, () => this.formIsValid())\n    }else if (this.state.inputs.alphakey.value === \"\") {\n      this.setState({\n        inputs: {\n          ...this.state.inputs,\n          alphakey: {\n            ...this.state.inputs.alphakey,\n            valid: '',\n            error: ''\n          }\n        }\n      }, () => this.formIsValid())\n    }\n  }\n\n  setAndgetAlphaKey = (url) => {\n    const alphaKeyMatch = url.match(/#?alpha-key=([0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12})/i);\n    if(alphaKeyMatch !== null) {\n      const alphaKeyInvite = alphaKeyMatch[1];\n    this.setState({\n      inputs: {\n        ...this.state.inputs,\n        alphakey: {\n          ...this.state.inputs.alphakey,\n          value: alphaKeyInvite,\n          }\n      }\n    })\n    }else {\n      this.setState({\n        inputs: {\n          ...this.state.inputs,\n          alphakey: {\n            ...this.state.inputs.alphakey,\n            value: \"\",\n            }\n        }\n      })\n    }\n  }\n\n  checkConfirmPass() {\n    if ((this.state.inputs.confirmpassword.value === this.state.inputs.password.value) && this.state.inputs.password.valid === 'valid') {\n      this.setState({\n        inputs: {\n          ...this.state.inputs,\n          confirmpassword: {\n            ...this.state.inputs.confirmpassword,\n            valid: 'valid',\n            error: ''\n          }\n        }\n      }, () => this.formIsValid())\n    } else if ((this.state.inputs.confirmpassword.value !== this.state.inputs.password.value) && this.state.inputs.confirmpassword.valid === 'valid' && this.state.inputs.password.value !== \"\") {\n      this.setState({\n        inputs: {\n          ...this.state.inputs,\n          confirmpassword: {\n            ...this.state.inputs.confirmpassword,\n            valid: 'invalid',\n            error: 'Must match password'\n          }\n        }\n      })\n    } else if ((this.state.inputs.confirmpassword.value !== this.state.inputs.password.value) && this.state.inputs.password.value === '' || this.state.inputs.confirmpassword === ''){\n      this.setState({\n        inputs: {\n          ...this.state.inputs,\n          confirmpassword: {\n            ...this.state.inputs.confirmpassword,\n            valid: '',\n            error: ''\n          }\n        }\n      })\n    }\n  }\n\n  liveValidation = (e) => {\n      if (e.target.name !== \"confirmpassword\") {\n        if (e.target.value === \"\") {\n          this.setState({\n            inputs: {\n              ...this.state.inputs,\n              [e.target.name]: {\n                ...this.state.inputs[e.target.name],\n                valid: \"\",\n                error: \"\"\n              },\n            },\n          }, () => {\n\n            this.formIsValid()\n            \n          })\n        } else if (this.state.inputs[e.target.name].regex.test(e.target.value)) {\n          if(e.target.name === \"usertag\"){\n            this.setInputsValid(e.target.name, \"\")\n          } else if (e.target.name === \"email\") {\n            this.setInputsValid(e.target.name, \"\")\n          } else if (e.target.name === \"password\") {\n            this.setInputsValid(e.target.name, \"\")\n          } else if (e.target.name === \"alphakey\") {\n            this.setInputsValid(e.target.name, \"\")\n          }\n        \n        } else {\n          if(e.target.name === \"usertag\"){\n            this.setErrorMsgAndInvalid(e.target.name, \"Username must be longer than 5 characters\");\n          } else if (e.target.name === \"email\") {\n            this.setErrorMsgAndInvalid(e.target.name, \"Email must contain @ and .\");\n          } else if (e.target.name === \"password\") {\n            this.setErrorMsgAndInvalid(e.target.name, \"Password must contain upper case and number\");\n          } else if (e.target.name === \"alphakey\") {\n            this.setErrorMsgAndInvalid(e.target.name, \"Wrong alpha key\");\n          }\n        }\n      } else {\n        if (e.target.value === \"\") {\n          this.setState({\n            inputs: {\n              ...this.state.inputs,\n              [e.target.name]: {\n                ...this.state.inputs[e.target.name],\n                valid: \"\",\n              }\n            }\n          }, () => {\n            this.formIsValid()\n          })\n        } else if (e.target.value === this.state.inputs.password.value && this.state.inputs.password.valid === \"valid\") {\n          this.setState({\n            inputs: {\n              ...this.state.inputs,\n              [e.target.name]: {\n                ...this.state.inputs[e.target.name],\n                valid: \"valid\",\n              }\n            }\n          }, () => {\n            this.formIsValid()\n          })\n        } else {\n          this.setState({\n            inputs: {\n              ...this.state.inputs,\n              [e.target.name]: {\n                ...this.state.inputs[e.target.name],\n                valid: \"invalid\",\n              }\n            },\n          }, () => {\n            this.formIsValid()\n          })\n        }\n      }\n  }\n\n  onEmailSubmit = (e) => {\n    e.preventDefault();\n    Fetcher.get(SERVER_URL + 'login/validate')\n    .then( res => { \n      //Already logged in\n    }).catch(err => {\n      Fetcher.post(SERVER_URL + 'registeralpha', {\n        \n        username: this.state.inputs.email.value, \n        password: this.state.inputs.password.value,\n        usertag: this.state.inputs.usertag.value,\n        \"alpha-key\": this.state.inputs.alphakey.value,\n      })\n      .then(() => {\n        this.setState({\n          registered: true,\n          loading: false,\n          loadingDone: true,\n          doneloadingtext: \"ACCOUNT CREATED\",\n        })\n        this.state.done.play()\n      }).catch(err => {\n        if (err.error === \"Not valid jwt\") {\n          this.setState({\n            registered: false,\n            loading: false,\n            loadingDone: false,\n            inputs:{\n              ...this.state.inputs,\n              alphakey:{\n                ...this.state.inputs.alphakey,\n                error: \"Wrong alpha key\",\n                valid: \"invalid\"\n              }\n            }\n          });\n          \n        }else if (err.error ===\"User already exists\") {\n          this.setState({\n            registered: false,\n            loading: false,\n            loadingDone: false,\n            inputs:{\n              ...this.state.inputs,\n              email:{\n                ...this.state.inputs.email,\n                error: \"Email already exists\",\n                valid: \"invalid\"\n              }\n            }\n          });\n        }\n      })\n    })\n  }\n\n  clearState = () => {\n    this.setState({\n      registered: false,\n      registerFormShown: true,\n      inputs: {\n        usertag: {\n          value: '',\n          valid: '', //ENUM: \"\" = not checked, \"valid\" = valid, \"invalid\" = invalid\n          error: '',\n          regex: RegExp(/^[a-zA-Z0-9àáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-_]{5,128}$/),\n        },\n        email: {\n          value: '',\n          valid: '', //ENUM: \"\" = not checked, \"valid\" = valid, \"invalid\" = invalid\n          error: '',\n          regex: RegExp(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/),\n        },\n        password: {\n          value: '',\n          valid: '', //ENUM: \"\" = not checked, \"valid\" = valid, \"invalid\" = invalid\n          error: '',\n          regex: RegExp(/^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/),\n        },\n        confirmpassword: {\n          value: '',\n          valid: '', //ENUM: \"\" = not checked, \"valid\" = valid, \"invalid\" = invalid\n          error: '',\n          regex: RegExp(/^(?=.*[\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\w!@#$%^&*]{8,}$/),\n        },\n        alphakey:{\n          value: '',\n          valid: '',\n          error: '',\n        }\n        \n      },\n      loadingDone: false,\n      submitFormActive: false,\n    })\n  }\n    \n    \n  render() {\n    return (\n      <div className=\"registration-form-container\">\n        <div id=\"loading\" className={\"loading \" + (this.state.loading ? \"active\": \"\")} />\n        <div id=\"loadingDone\" className={\"loadingDone \" + (this.state.loadingDone ? \"active\": \"\")} />\n        {!this.state.registered ?\n          <div className={\"form-container \" + (this.state.loading ? \"inactive\": \"\")}>\n            <React.Fragment>\n              <div className=\"input-container-reg\">\n                <input className={\"form-input \" + ((this.state.inputs.usertag.valid === \"valid\") ? \"valid\": \"\") + ((this.state.inputs.usertag.valid === \"invalid\") ? \"invalid\": \"\")} id=\"usertag-input\" type=\"text\" name=\"usertag\" placeholder=\"Username\" onChange={this.onInputChange} onBlur={this.liveValidation} autoComplete=\"off\" value={this.state.inputs.usertag.value}></input>\n                <span className=\"errorMessage\">{this.state.inputs.usertag.error}</span>\n              </div>\n              <div className=\"input-container-reg\">\n                <input className={\"form-input \" + ((this.state.inputs.email.valid === \"valid\") ? \"valid\": \"\") + ((this.state.inputs.email.valid === \"invalid\") ? \"invalid\": \"\")} id=\"email-input\" type='text' name=\"email\" placeholder=\"E-mail\" onChange={this.onInputChange} onBlur={this.liveValidation} autoComplete=\"off\" value={this.state.inputs.email.value}></input>\n                <span className=\"errorMessage\">{this.state.inputs.email.error}</span>\n              </div>\n              <div className=\"input-container-reg\">\n                <input className={\"form-input \" + ((this.state.inputs.password.valid === \"valid\") ? \"valid\": \"\") + ((this.state.inputs.password.valid === \"invalid\") ? \"invalid\": \"\")} id=\"password-input\" type='password' name=\"password\" placeholder=\"Password\" onChange={this.onInputChange} onBlur={this.liveValidation} autoComplete=\"off\" value={this.state.inputs.password.value}></input>\n                <span className=\"errorMessage\">{this.state.inputs.password.error}</span>\n              </div>\n              <div className=\"input-container-reg\">\n                <input className={\"form-input \" + \n                    ((this.state.inputs.confirmpassword.valid === \"valid\") ? \"valid\": \"\") + \n                    ((this.state.inputs.confirmpassword.valid === \"invalid\") ? \"invalid\": \"\")} \n                  id=\"confirm-password-input\" \n                  type='password' \n                  name=\"confirmpassword\" \n                  placeholder=\"Confirm Password\" \n                  onChange={this.onInputChange} \n                  onBlur={this.liveValidation} \n                  automplete=\"off\" \n                  value={this.state.inputs.confirmpassword.value} />\n                <span className=\"errorMessage\">{this.state.inputs.confirmpassword.error}</span>\n              </div>\n              <div className=\"input-container-reg\">\n                <input className={\"form-input \" + ((this.state.inputs.alphakey.valid === \"valid\") ? \"valid\": \"\") + ((this.state.inputs.alphakey.valid === \"invalid\") ? \"invalid\": \"\")} id=\"api-key-input\" type='text' name=\"alphakey\" placeholder=\"API-KEY\" onChange={this.onInputChange} onBlur={this.liveValidation} autoComplete=\"off\" value={this.state.inputs.alphakey.value}></input>\n                <span className=\"errorMessage\">{this.state.inputs.alphakey.error}</span>\n              </div>\n              <div className=\"input-container-reg\">\n                <button id=\"form-submit\" className={(this.state.submitFormActive ? \"active\" : \"\")} onClick={this.state.submitFormActive ? (e) => {this.onEmailSubmit(e); this.setState({loading: true})} : () => {}}>Create Account</button>\n              </div>\n            </React.Fragment>\n          </div>\n            :  \n            <React.Fragment>\n              <div className=\"done-loading-container\">\n                <p className=\"interest-text\">{this.state.doneloadingtext}</p>\n                <button className=\"register-new-button\" onClick={() => {\n                  this.state.done.stop()\n                  this.clearState()\n                }}>Let´s Brawl</button>\n            </div>\n          </React.Fragment>\n        }\n      </div>\n    )\n  }\n}\nexport default RegistrationForm;","import React,{ Component } from 'react';\nimport { withRouter, NavLink } from 'react-router-dom';\n\nimport './Navigation.scss'\n\nclass Navigation extends Component {\n    render() {\n        return (\n            <nav className=\"navigation\">\n                <div className=\"navigation-container\">\n                    <NavLink to=\"/\" className=\"navigation-logo-container\">\n                        <img src=\"\" className=\"navigation-logo\" />\n                    </NavLink>\n                    <div className=\"navigation-links\">\n                        <ul className=\"navigation-item-wrapper\">\n                            {/*<li className=\"navigation-item\" ><NavLink to=\"/\" activeClassName='is-active' style={{ textDecoration: 'none' }}><p className=\"navbar-text\">HOME</p></NavLink></li>\n                            <li className=\"navigation-item\"><NavLink to=\"/registration\" activeClassName='is-active' style={{ textDecoration: 'none' }}><p className=\"navbar-text\">REGISTER</p></NavLink></li>*/}\n                            <li className=\"navigation-item\"><p className=\"navbar-text\">EARLY ACCESS</p></li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n        )\n    }\n}\n\nexport default Navigation;","import React, { Component } from 'react';\n\nimport InterestForm from '../InterestForm/InterestForm';\nimport RegistrationForm from '../Registration/RegistrationForm/RegistrationForm';\nimport Navigation from '../Navigation/Navigation';\n\nimport './Registration.scss';\n\nclass Registration extends Component {\n\trender() {\n\t\treturn (\n            <React.Fragment>\n            <Navigation/>\n      <div className=\"registration-container\">\n        <div className=\"registration-container-inner\">\n            <div className=\"registration-container-content\">\n            <div className=\"registration-header\"><h1>REGISTER</h1></div>\n            <div className=\"registration-text\"><p>Why join Brawl Gaming?</p></div>\n            <div className=\"registration-info-box\">\n                <div className=\"registration-info-box-text\">\n                    <p>Ready up and join the Brawl Gaming Community</p>\n                    <p>Bet with or against your friends</p>\n                    <p>Brawl for the pot</p>\n                </div>\n            </div>\n        </div>\n    </div>\n        <div className=\"registration-container-form\">\n            <RegistrationForm/>\n        </div>\n      </div>\n      </React.Fragment>\n\t\t)\n\t}\n}\n\nexport default Registration;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch, HashRouter } from 'react-router-dom';\n\nimport Home from './components/Home/Home'\nimport Registration from './components/Registration/Registration'\nimport Navigation from './components/Navigation/Navigation'\n\nimport './App.scss';\nimport './styles/reset.scss';\n\nclass App extends Component {\n  render() {\n    return (\n        <HashRouter>\n          <div className=\"app\">\n            <Switch>\n              <Route path='/' component={Home} exact/>\n              <Route path='/registration' component={Registration} exact/>\n              <Route component={() => (<div>404 Not found </div>)} />\n            </Switch>\n          </div>\n        </HashRouter>\n    );\n  }\n}\n\nexport default App;\n\n\n// {\n//   \"rules\": {\n//     \"maillist\": {\n//       \"$id\": {\n//         \".read\": true,\n//         \".write\": true,\n//         \".validate\": \"newData.child('email').val().matches(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,4}$/i)\"\n//       }\n//     }\n//   }\n// }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}